/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

import okhttp3.OkHttpClient
import okhttp3.Request
import okhttp3.Response
import okio.IOException
import org.json.JSONArray
import java.io.File


data class Branch(val name: String, val sha: String)

class Library {
    val client = OkHttpClient()

    @Throws(Exception::class)
    fun findBranchByNameRemote(api: String, branchName: String, accessToken: String? = null): Branch {

        val request = Request.Builder()
            .url("$api/branches")
            .apply {
                if (!accessToken.isNullOrBlank()) {
                    header("Authorization", "token $accessToken")
                }
            }
            .build()

        val response: Response
        try {
            response = client.newCall(request).execute()
        } catch (e: IOException) {
            throw Exception(e)
        }

        if (!response.isSuccessful) {
            throw Exception("GitHub API error: ${response.code} - ${response.body?.string()}")
        }

        val body = response.body?.string() ?: throw Exception("Empty response body")
        val branchesArray = JSONArray(body)

        for (i in 0 until branchesArray.length()) {
            val branchJson = branchesArray.getJSONObject(i)
            if (branchJson.getString("name") == branchName) {
                val sha = branchJson.getJSONObject("commit").getString("sha")
                return Branch(branchName, sha)
            }
        }

        throw Exception("Branch '$branchName' not found")
    }

    fun findBranchByNameLocal(localRepoPath: String, branchName: String): Branch {
        val branchLogsPath = "$localRepoPath/.git/logs/refs/heads/$branchName"
        val branchDirPath = "$localRepoPath/.git/logs/refs/heads"

        val branchFile = File(branchLogsPath)
        if (!branchFile.exists()) {
            throw Exception("Local branch '$branchName' not found")
        }

        val localBranchList = File(branchDirPath).list() ?: emptyArray()
        val branchNameLocal = localBranchList.find { it == branchName }

        val lastLine = branchFile.readLines().lastOrNull()
            ?: throw Exception("No log found for branch '$branchName'")

        val sha = lastLine.split(" ").getOrNull(1) ?: throw Exception("No commit SHA found in the log")

        return Branch(branchNameLocal ?: throw Exception("Branch '$branchName' not found in branch list"), sha)
    }
}
